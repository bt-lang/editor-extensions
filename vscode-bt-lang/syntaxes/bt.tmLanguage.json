{
  "$schema": "./tmlanguage.json",
  "name": "bt",
  "scopeName": "source.bt",
  "patterns": [
    {
      "name": "comment.line.double-slash.bt",
      "match": "//.*$"
    },
    {
      "name": "comment.block.bt",
      "begin": "/\\*",
      "end": "\\*/"
    },
    {
      "name": "string.regexp.bt",
      "begin": "(?<![\\w\\)\\]])/(?![\\s=])",
      "end": "/[gimsuy]*",
      "patterns": [
        {
          "name": "constant.character.escape.bt",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "keyword.operator.bt",
      "match": "[=+\\-*/%^&<>!@~|?]+"
    },
    {
      "name": "keyword.control.bt",
      "match": "\\b(pub|fn|class|return|for|in|while|loop|break|continue|delete|if|elseif|else|let|import|print|println)\\b"
    },
    {
      "name": "constant.language.bt",
      "match": "\\b(true|false|null|empty|undefined|Infinity)\\b"
    },
    {
      "name": "constant.numeric.bt",
      "match": "\\b(0[xX][0-9a-fA-F]+|\\d+(\\.\\d+)?([eE][+-]?\\d+)?)\\b"
    },
    {
      "name": "string.quoted.single.bt",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.bt",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "string.quoted.double.bt",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.bt",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "string.quoted.template.bt",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "name": "string.interpolation.bt",
          "begin": "\\$\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "variable.other.bt",
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
            }
          ]
        },
        {
          "name": "constant.character.escape.bt",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "variable.language.bt",
      "match": "\\b(this)\\b"
    },
    {
      "name": "method.call.bt",
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\()",
      "captures": {
        "0": {
          "name": "entity.name.function.bt"
        }
      }
    },
    {
      "name": "support.function.bt",
      "match": "\\b(get_type|bool|include|date|file)\\b"
    },
    {
      "name": "support.web.function.bt",
      "match": "\\b(header|status_code|redirect)\\b"
    },
    {
      "name": "variable.web.variable.bt",
      "match": "\\b(url|get|post|method|server)\\b"
    },
    {
      "name": "support.type.number.bt",
      "match": "\\b(len|to_fixed|to_string|to_exponential)\\b"
    },
    {
      "name": "support.type.string.bt",
      "match": "\\b(len|char|char_code|concat|ends_with|contain|index|last_index|repeat|replace|search|match|slice|split|starts_with|substring|to_lowercase|to_uppercase|trim|to_string|escape_html|unescape_html|parse)\\b"
    },
    {
      "name": "support.type.array.bt",
      "match": "\\b(len|join|each|pop|push|shift|unshift|sort|reverse|slice|splice|concat|contain|index|last_index|find|find_index|find_last|find_last_index|every|some|filter|map|reduce|reduce_right|fill|flat|flat_map|keys|values|entries)\\b"
    },
    {
      "name": "support.type.object.bt",
      "match": "\\b(len|join|each|pop|push|shift|unshift|sort|reverse|slice|splice|concat|contain|index|last_index|find|find_index|find_last|find_last_index|every|some|filter|map|reduce|reduce_right|fill|flat|flat_map|keys|values|entries)\\b"
    }
  ],
  "repository": {}
}