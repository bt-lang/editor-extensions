{
  "$schema": "./tmlanguage.json",
  "name": "bt",
  "scopeName": "source.bt",
  "patterns": [
    {
      "name": "comment.block.bt",
      "begin": "^\\s*#\\s*TPL\\b.*?\\n",
      "end": "",
      "patterns": [
        {
          "name": "string.quoted.template.bt",
          "begin": "",
          "end": "",
          "patterns": [
            {
              "name": "string.interpolation.bt",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                {
                  "name": "variable.other.bt",
                  "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                }
              ]
            },
            {
              "name": "string.interpolation.bt",
              "begin": "\\{%",
              "end": "%\\}",
              "patterns": [
                {
                  "include": "#bt-code"
                }
              ]
            },
            {
              "name": "constant.character.escape.bt",
              "match": "\\\\."
            },
            {
              "include": "text.html.basic"
            }
          ]
        }
      ]
    },
    {
      "name": "comment.line.double-slash.bt",
      "match": "//.*$"
    },
    {
      "name": "comment.block.bt",
      "begin": "/\\*",
      "end": "\\*/"
    },
    {
      "name": "string.regexp.bt",
      "begin": "(?<![\\w\\)\\]])/(?![\\s=])",
      "end": "/[gimsuy]*",
      "patterns": [
        {
          "name": "constant.character.escape.bt",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "keyword.operator.bt",
      "match": "[=+\\-*/%^&<>!@~|?]+"
    },
    {
      "name": "keyword.control.bt",
      "match": "\\b(pub|fn|class|return|for|in|while|loop|break|continue|if|elseif|else|let|use|import|print|println)\\b"
    },
    {
      "name": "constant.language.bt",
      "match": "\\b(true|false|null|empty|undefined|infinity)\\b"
    },
    {
      "name": "constant.numeric.bt",
      "match": "\\b(0[xX][0-9a-fA-F]+|\\d+(\\.\\d+)?([eE][+-]?\\d+)?)\\b"
    },
    {
      "name": "support.other.bt",
      "match": "\\b(this|include)\\b"
    },
    {
      "name": "string.quoted.single.bt",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.bt",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "string.quoted.double.bt",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.bt",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "string.quoted.template.bt",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "name": "string.interpolation.bt",
          "begin": "\\$\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "variable.other.bt",
              "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
            }
          ]
        },
        {
          "name": "string.interpolation.bt",
          "begin": "\\{%",
          "end": "%\\}",
          "patterns": [
            {
              "include": "#bt-code"
            }
          ]
        },
        {
          "name": "constant.character.escape.bt",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "method.call.bt",
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\()",
      "captures": {
        "0": {
          "name": "entity.name.function.bt"
        }
      }
    }
  ],
  "repository": {
    "bt-code": {
      "patterns": [
        {
          "name": "comment.block.bt",
          "begin": "^\\s*#\\s*TPL\\b.*?\\n",
          "end": "",
          "patterns": [
            {
              "name": "string.quoted.template.bt",
              "begin": "",
              "end": "",
              "patterns": [
                {
                  "name": "string.interpolation.bt",
                  "begin": "\\$\\{",
                  "end": "\\}",
                  "patterns": [
                    {
                      "name": "variable.other.bt",
                      "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                    }
                  ]
                },
                {
                  "name": "string.interpolation.bt",
                  "begin": "\\{%",
                  "end": "%\\}",
                  "patterns": [
                    {
                      "include": "#bt-code"
                    }
                  ]
                },
                {
                  "name": "constant.character.escape.bt",
                  "match": "\\\\."
                },
                {
                  "include": "text.html.basic"
                }
              ]
            }
          ]
        },
        {
          "name": "comment.line.double-slash.bt",
          "match": "//.*$"
        },
        {
          "name": "comment.block.bt",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "string.regexp.bt",
          "begin": "(?<![\\w\\)\\]])/(?![\\s=])",
          "end": "/[gimsuy]*",
          "patterns": [
            {
              "name": "constant.character.escape.bt",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "keyword.operator.bt",
          "match": "[=+\\-*/%^&<>!@~|?]+"
        },
        {
          "name": "keyword.control.bt",
          "match": "\\b(pub|fn|class|return|for|in|while|loop|break|continue|if|elseif|else|let|use|import|print|println)\\b"
        },
        {
          "name": "constant.language.bt",
          "match": "\\b(true|false|null|empty|undefined|infinity)\\b"
        },
        {
          "name": "constant.numeric.bt",
          "match": "\\b(0[xX][0-9a-fA-F]+|\\d+(\\.\\d+)?([eE][+-]?\\d+)?)\\b"
        },
        {
          "name": "support.other.bt",
          "match": "\\b(this|include)\\b"
        },
        {
          "name": "string.quoted.single.bt",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.bt",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.bt",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.bt",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.template.bt",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "string.interpolation.bt",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                {
                  "name": "variable.other.bt",
                  "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                }
              ]
            },
            {
              "name": "string.interpolation.bt",
              "begin": "\\{%",
              "end": "%\\}",
              "patterns": [
                {
                  "include": "#bt-code"
                }
              ]
            },
            {
              "name": "constant.character.escape.bt",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "method.call.bt",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\()",
          "captures": {
            "0": {
              "name": "entity.name.function.bt"
            }
          }
        }
      ]
    }
  }
}